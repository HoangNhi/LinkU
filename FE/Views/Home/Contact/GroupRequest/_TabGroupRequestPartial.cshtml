<style>
    /*Style Container*/
    .groupRequest-parent {
        display: flex;
        flex-wrap: wrap;
        align-content: flex-start;
        gap: 12px;
        overflow-y: auto;
        padding: 8px 0 16px 8px;
        height: 100%
    }

    .groupRequest-parent .circles-container{
        position: relative;
        width: 64px;
        height: 64px;
    }

    .groupRequest-parent .circle{
        width: 40px;
        height: 40px;
        position: absolute;
        top: 50%;
        left: 50%;
        transform-origin: center;
        box-shadow: rgba(0, 0, 0, 0.12) 0px 1px 3px, rgba(0, 0, 0, 0.24) 0px 1px 2px;
    }
</style>

<div class="w-100 h-100" style="background-color: rgb(245, 245, 245)">
    @* Header *@
    <div class="p-3 bg-white d-flex align-items-center"
         style="max-height: 80px; border-radius: 12px; box-shadow: rgba(0, 0, 0, 0.4) 0px 2px 4px, rgba(0, 0, 0, 0.3) 0px 7px 13px -3px, rgba(0, 0, 0, 0.2) 0px -3px 0px inset;">
        <span class="material-symbols-outlined me-2 fs-1 text-brown-900">
            group_add
        </span>
        <span class="fw-bold fs-6" style="line-height: 2.5rem">Lời mời vào nhóm</span>
    </div>

    <p id="groupRequestTotal" class="my-3">Lời mời đã nhận (0)</p>

    <div class="py-2 bg-white rounded-3" style="box-shadow: rgba(0, 0, 0, 0.4) 0px 2px 4px, rgba(0, 0, 0, 0.3) 0px 7px 13px -3px, rgba(0, 0, 0, 0.2) 0px -3px 0px inset; height: calc(100% - 130px);">
        @* Search *@
        <div id="groupRequestSearchInputContainer"
             class="d-flex align-items-center m-2 mb-0 border border-secondary"
             style="background-color: rgba(134, 142, 153, .1); border-radius: 50px; overflow: hidden">
            <i class="fas fa-search"
               style="padding: 0 4px 0 14px; line-height: 36px; background-color: rgba(0,0,0,0)"></i>
            <input id="groupRequestSearchInput"
                   class="w-100 border-0"
                   style="background-color: rgba(0,0,0,0); outline: unset"
                   type="search"
                   placeholder="Tìm kiếm"
                   autocomplete="off">
        </div>
        @* Container *@
        <div id="groupRequest-container"
             style="overflow: visible;
                    height: calc(100% - 40px);
                    scrollbar-color: rgba(0, 0, 0, 0.3) rgba(245, 245, 245, 0);">
        </div>
    </div>
</div>

<script>
    var groupRequestPageIndex = 1; groupRequestRowPerPage = 15, groupRequestIsDone = false, groupRequestIsLoading = false, groupRequestTypingTimer = null;
    const $groupRequestSearchInput = $("#groupRequestSearchInput"),
        groupRequestSearchInput = document.getElementById("groupRequestSearchInput"),
        groupRequestContainer = document.getElementById("groupRequest-container"),
        groupRequestTotal = document.getElementById("groupRequestTotal")

    const scrollListeners = new WeakMap();

    $(document).ready(function () {
        getListPaginggroupRequest()

        // Input text search
        groupRequestSearchInput.addEventListener("input", () => {
            // Xóa timeout cũ nếu còn
            clearTimeout(groupRequestTypingTimer);

            // Chuyển lại trạng thái tìm kiếm
            groupRequestIsLoading = false, groupRequestIsDone = false;

            // Đặt lại timeout: nếu sau 800ms không gõ thì ẩn loading và hiện kết quả tìm kiếm
            groupRequestTypingTimer = setTimeout(() => {
                groupRequestContainer.innerHTML = ``;
                // Render kết quả tìm kiếm
                getListPaginggroupRequest(1, 15)
            }, 800);
        })

    });

    function getListPaginggroupRequest(pageindex = 1, rowperpage = 15, isRefresh = false, callback = null) {
        if (isRefresh) {
            $.ajax({
                url: '@Url.Action("GroupRequestGetListPaging", "Group")',
                type: 'GET',
                data: {
                    UserId: '@ViewContext.GetClaimValue("UserId")',
                    PageIndex: 1,
                    RowPerPage: groupRequestPageIndex * groupRequestRowPerPage,
                    TextSearch: $groupRequestSearchInput.val()
                },
                success: function (data) {
                    if (data.trim() === "") {
                        if (pageindex === 1) {
                            groupRequestContainer.innerHTML = noGroupRequest
                        }
                    }
                    else {
                        const $html = $('<div>').html(data);
                        if ($html.find('.groupRequestTotalRow').length > 0) {
                            groupRequestTotal.innerHTML = `Lời mời đã nhận (${$html.find('.groupRequestTotalRow')[0].innerHTML})`
                        }

                        // Gán vào parent
                        $html.addClass("groupRequest-parent")
                        groupRequestContainer.innerHTML = $html[0].outerHTML
                    }

                    // Callback
                    if (typeof callback === 'function') {
                        callback()
                    }
                },
                error: function (xhr, error) {
                    ShowThongBaoThatBai(error)
                }
            });
        } else {
            if (groupRequestIsDone) return;
            if (groupRequestIsLoading) return;

            groupRequestIsLoading = true;

            $.ajax({
                url: '@Url.Action("GroupRequestGetListPaging", "Group")',
                type: 'GET',
                data: {
                    UserId: '@ViewContext.GetClaimValue("UserId")',
                    PageIndex: pageindex,
                    RowPerPage: rowperpage,
                    TextSearch: $groupRequestSearchInput.val()
                },
                success: function (data) {
                    // Cập nhật số trang, số dòng và trạng thái loading
                    groupRequestPageIndex = pageindex
                    groupRequestRowPerPage = rowperpage
                    groupRequestIsLoading = false;

                    if (data.trim() === "") {
                        if (pageindex === 1) {
                            if ($groupRequestSearchInput.val() === '') {
                                // Chưa có bạn
                                const div = $("<div>").html(noGroupRequest)
                                div.addClass("h-100")
                                div.css('align-content', 'center');
                                groupRequestContainer.innerHTML = div[0].outerHTML
                            } else {
                                // Không tìm thấy
                                const div = $("<div>").html(notFound)
                                div.addClass("h-100")
                                div.css('align-content', 'center');
                                groupRequestContainer.innerHTML = div[0].outerHTML
                            }
                            groupRequestTotal.innerHTML = `Lời mời đã nhận (0)`
                        } else {
                            groupRequestIsDone = true;
                        }

                    }
                    else {
                        const $html = $('<div>').html(data);
                        if ($html.find('.groupRequestTotalRow').length > 0) {
                            groupRequestTotal.innerHTML = `Lời mời đã nhận (${$html.find('.groupRequestTotalRow')[0].innerHTML})`
                        }

                        if (pageindex == 1) {
                            $html.addClass("groupRequest-parent")
                            $html.attr('id', 'groupRequestParent');
                            groupRequestContainer.innerHTML = $html[0].outerHTML
                        } else {
                            $("#groupRequest-container > div.groupRequest-parent").append(data);
                        }

                        // Popover hiển thị tên
                        if ($html.find('img[data-mdb-popover-init]').length > 0) {
                            const popoverTriggerList = $html.find('img[data-mdb-popover-init]')
                            var option = {
                                sanitize: false,
                            }
                            const popoverList = [...popoverTriggerList].map(popoverTriggerEl => {
                                const element = document.getElementById(popoverTriggerEl.id);
                                return new mdb.Popover(element, option)
                            })
                        }

                        // Xử lý sự kiện scroll
                        const groupRequestParent = document.getElementById("groupRequestParent");
                        if (!hasScrollListener(groupRequestParent)) {
                            addScrollListener(groupRequestParent, () => {
                                const scrollTop = groupRequestParent.scrollTop;
                                const docHeight = groupRequestParent.clientHeight;
                                const windowHeight = groupRequestParent.scrollHeight;

                                if (scrollTop + docHeight + 1 >= windowHeight) {
                                    getListPaginggroupRequest(groupRequestPageIndex + 1, groupRequestRowPerPage);
                                }
                            });
                        }
                    }


                    // Callback
                    if (typeof callback === 'function') {
                        callback()
                    }
                },
                error: function (xhr, error) {
                    groupRequestIsLoading = false;
                    ShowThongBaoThatBai(error)
                }
            });
        }
    }

    function RefuseRequest(id) {
        showLoading(true)
        $.ajax({
            url: '@Url.Action("UpdateStateGroupRequest", "Group")',
            type: 'POST',
            data: {
                Id: id,
                State: 2
            },
            success: function (response) {
                if (response.isSuccess === undefined || response.isSuccess == false) {
                    showLoading(false)
                    ShowThongBaoThatBai(response.message)
                } else {
                    getListPaginggroupRequest(null, null, true, () => { showLoading(false) })
                }
            },
            error: function (xhr, error) {
                showLoading(false)
                ShowThongBaoThatBai(error)
            }
        });
    }

    function AcceptRequest(id) {
        showLoading(true)
        $.ajax({
            url: '@Url.Action("UpdateStateGroupRequest", "Group")',
            type: 'POST',
            data: {
                Id: id,
                State: 1
            },
            success: function (response) {
                if (response.isSuccess === undefined || response.isSuccess == false) {
                    showLoading(false)
                    ShowThongBaoThatBai(response.message)
                } else {
                    // Refresh GroupRequest
                    getListPaginggroupRequest(null, null, true, () => { showLoading(false) })

                    // Refresh Group
                    GetListPagingGroup(groupPageIndex, groupRowPerPage, true);

                    // Refresh Conversation
                    GetListPagingConversation(PageIndexConversation, RowPerPageConversation, () =>
                    {
                        // Chuyển sang tab message
                        setActiveButton(response.data.groupId)
                        transToChatScreen(response.data.groupId, 1)
                        SwitchToTabFunctions('tab-conversation');
                        SwitchToTabChatArea('tab-chat-message');

                        // Gửi yêu cầu refresh cho các thành viên còn lại trong nhóm
                        var data = {
                            UserId: '@ViewContext.GetClaimValue("UserId")',
                            GroupId: response.data.groupId
                        }
                        connection.invoke("RequestRerenderTabOfGroupMember", data);

                    })
                }
            },
            error: function (xhr, error) {
                showLoading(false)
                ShowThongBaoThatBai(error)
            }
        });
    }

    // Function hỗ trợ
    function addScrollListener(el, callback) {
        el.addEventListener('scroll', callback);
        scrollListeners.set(el, callback);
    }

    function hasScrollListener(el) {
        return scrollListeners.has(el);
    }
</script>