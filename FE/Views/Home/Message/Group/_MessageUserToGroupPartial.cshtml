@model MODELS.GROUP.Dtos.MODELGroup
@{
    // Avartar
    Dictionary<int, List<(int, int)>> positions = new Dictionary<int, List<(int, int)>>
{
        { 2, [(-12, 0), (12, 0)] },
        { 3, [(0, -12), (-12, 12), (12, 12)] },
        { 4, [(-12, -12), (-12, 12), (12, 12), (12, -12)] }
    };

    // Wellcome
    Dictionary<int, List<(int, int)>> pos = new Dictionary<int, List<(int, int)>>
{
        { 2, [(-16, 0), (16, 0)] },
        { 3, [(0, -16), (-16, 16), (16, 16)] },
        { 4, [(-16, -16), (-16, 16), (16, 16), (16, -16)] }
    };
}

<style>
    #Message_Content:empty::before {
        content: attr(data-placeholder);
        color: gray;
        pointer-events: none;
    }

    #MessageContainer {
        display: flex;
        height: 100%
    }
</style>

<style>
    /* Container cha */
    .Mwrapper {
        container-type: inline-size; /* Theo dõi chiều rộng của container */
        height: 100%;
        width: 100%;
        place-content: end;
    }

    .profile-card {
        width: 400px;
        justify-self: center;
        overflow: hidden;
        box-shadow: rgba(0, 0, 0, 0.4) 0px 2px 4px, rgba(0, 0, 0, 0.3) 0px 7px 13px -3px, rgba(0, 0, 0, 0.2) 0px -3px 0px inset;
    }

    .MyMessage {
        background-color: #543310;
        color: white;
        place-self: flex-end
    }

    .OtherMessage {
        background-color: var(--mdb-gray-200);
        color: black;
    }

    /* Container Query */
    /* Khi container nhỏ hơn 420px*/
    @@container (max-width: 420px) {
        .profile-card {
            width: 360px
        }
    }

    /* Khi container nhỏ hơn 380px*/
    /* Khi container nhỏ hơn 420px*/
    @@container (max-width: 380px) {
        .profile-card {
            width: 300px
        }

        .FirstMessageSuggestion {
            display: none
        }
    }
</style>

@* Preview File *@
<style>
    .PreviewFileContent {
        position: relative;
    }

    .PreviewFileContent_BtnRemove {
        position: absolute;
        top: -10px;
        right: -10px;
        background-color: white
    }

        .PreviewFileContent_BtnRemove:hover {
            background-color: var(--mdb-gray-200) !important
        }

    #btnUploadFile {
        transition: all 0.3s ease-in-out;
        transform-origin: center;
    }

        #btnUploadFile.hide {
            opacity: 0;
            transform: scale(0);
            width: 0 !important;
            margin: 6px 0 !important;
        }

    /* Animation cho Message Container */
    #Message_Container {
        transition: width 0.3s ease-in-out;
        width: 100%;
    }

        /* Thêm class này để mở rộng message container */
        #Message_Container.expanded {
            width: calc(100% - 48px);
        }


    .FilePreview {
        outline: 5px solid black;
        cursor: pointer
    }

    .BorderLeft {
        border-bottom-left-radius: 18px !important;
        border-top-left-radius: 18px !important
    }

    .BorderRight {
        border-bottom-right-radius: 18px !important;
        border-top-right-radius: 18px !important;
    }
</style>

@* Tương tác với tin nhắn *@
<style>
    .Message_Interaction {
        position: absolute;
        top: 0;
        width: fit-content;
        left: 5px;
        display: none;
        align-self: anchor-center;
    }

    div.flex-row-reverse > div > .Message_Interaction {
        left: -52px;
        flex-direction: row-reverse;
    }

    .Message_Content:hover .Message_Interaction,
    .Message_Interaction:has(.btn-ReactionType[aria-describedby]) {
        display: inline-flex
    }

    .Message_Interaction > button::before {
        content: attr(data-content);
        position: absolute;
        top: -32px; /* hoặc chỉnh lại tùy vị trí bạn muốn */
        left: 50%;
        transform: translateX(-50%);
        background-color: #333;
        color: #fff;
        padding: 4px 8px;
        border-radius: 4px;
        white-space: nowrap;
        font-size: 12px;
        opacity: 0;
        pointer-events: none;
        transition: opacity 0.2s;
        z-index: 100;
    }

    .Message_Interaction > button:hover::before {
        opacity: 1
    }

    .RefMessage {
        cursor: pointer
    }
</style>

@Html.Hidden("TargetId", Model.Id)
@Html.Hidden("ConversationType", 1)

<div class="card text-center flex-grow-1 h-100"
     style="box-shadow: rgba(0, 0, 0, 0.4) 0px 2px 4px, rgba(0, 0, 0, 0.3) 0px 7px 13px -3px, rgba(0, 0, 0, 0.2) 0px -3px 0px inset;">
    <div class="card-header d-flex justify-content-between position-relative"
         style="padding: 10px 12px; box-shadow: rgba(0, 0, 0, 0.15) 0px 3px 3px 0px; border: 0">
        <div class="d-flex align-items-center">
            <!--Avartar-->
            @if (!string.IsNullOrEmpty(Model.AvartarUrl))
            {
                <img class="rounded-circle me-1"
                     style="object-fit: cover; box-shadow: rgba(9, 30, 66, 0.25) 0px 4px 8px -2px, rgba(9, 30, 66, 0.08) 0px 0px 0px 1px;"
                     width="48" height="48"
                     src='@(Model.AvartarUrl)' />
            }
            else
            {
                <div class="circles-container me-2">
                    @{
                        int countMember = Model.GroupMembers.Count <= 4 ? Model.GroupMembers.Count : 4;
                        int sub = 0;
                    }
                    @for (int i = 1; i <= countMember && i <= 4; i++)
                    {
                        if (i == 3 && Model.GroupMembers.Count > 4)
                        {
                            <div class="circle rounded-circle d-flex justify-content-center align-items-center text-white"
                                 style="background-color: grey;
                        transform: translate(calc(-50% + @(positions[countMember][i-1].Item1)px), calc(-50% + @(positions[countMember][i-1].Item2)px));
                        z-index: @( i switch
                        {
                            2 => 0,
                            1 => 5,
                            3 => 3,
                            4 => 4
                        } )">
                                @($"{Model.GroupMembers.Count - 3} +")
                            </div>
                            sub = 1;
                        }
                        else
                        {
                            <div class="circle rounded-circle d-flex justify-content-center align-items-center text-white"
                                 style="background: no-repeat center / cover url(@Model.GroupMembers[i - 1 - sub].User.ProfilePicture);
                        transform: translate(calc(-50% + @(positions[countMember][i-1].Item1)px), calc(-50% + @(positions[countMember][i-1].Item2)px));
                        z-index: @( i switch
                        {
                            2 => 0,
                            1 => 5,
                            3 => 3,
                            4 => 4
                        } )">
                            </div>
                        }
                    }
                </div>
            }
            <!--Title-->
            <div class="d-flex flex-column align-items-start text-black">
                <span id="Message_Title" class="fs-4">@Model.GroupName</span>
                <span class="lh-1" style=" font-weight: 400; font-size: 0.8rem; color: var(--mdb-gray-900);">
                    <i class="fa-regular fa-user"></i>
                    @($"{Model.GroupMembers.Count} thành viên")
                </span>
            </div>
        </div>
        <div class="d-flex">
            <button type="button"
                    class="btn btn-link rounded-circle position-relative"
                    style="margin: 6px; height: 36px; width: 36px; padding: 0"
                    data-mdb-ripple-init
                    data-mdb-ripple-color="dark">
                <i class="fa-solid fa-phone position-absolute"
                   style="color: #473c38;
                          font-size: 18px;
                          top: 50%;
                          left: 50%;
                          transform: translate(-50%, -50%);"></i>
            </button>
            <button type="button"
                    class="btn btn-link rounded-circle position-relative"
                    style="margin: 6px; height: 36px; width: 36px; padding: 0"
                    data-mdb-ripple-init
                    data-mdb-ripple-color="dark">
                <i class="fa-solid fa-video position-absolute"
                   style="color: #473c38;
                          font-size: 18px;
                          top: 50%;
                          left: 50%;
                          transform: translate(-50%, -50%);"></i>
            </button>
            <button type="button"
                    class="btn btn-link rounded-circle position-relative"
                    style="margin: 6px; height: 36px; width: 36px; padding: 0"
                    data-mdb-ripple-init
                    data-mdb-ripple-color="dark">
                <i class="fa-solid fa-ellipsis position-absolute"
                   style="color: #473c38;
                          font-size: 18px;
                          top: 50%;
                          left: 50%;
                          transform: translate(-50%, -50%);"></i>
            </button>
        </div>
    </div>

    @* Container chứa tin nhắn *@
    <div id="MessageWrapper" class="card-body p-0" style="height: calc(100% - 136px); overflow: auto">
        <div id="MessageContainer">
            <div class="Mwrapper">
                <div id="ChatContainer" class="container"></div>
            </div>
        </div>
    </div>

    @* Nhập tin nhắn *@

    <div class="card-footer border-0 p-0">
        @* Trả lời tin nhắn *@
        <div id="ResponseMessageContainer" class="w-100 border-top justify-content-between align-items-center"
             style="padding: 10px 15px 0px; margin-bottom: -4px; display: none">
        </div>

        @* Nhắn tin *@
        <div class="d-flex w-100" style="padding: 10px 8px">
            <label for="PreviewUploadFileContainer_Input"
                   id="btnUploadFile"
                   class="btn btn-link rounded-circle position-relative align-self-end"
                   style="margin: 6px; height: 36px; width: 36px; padding: 0"
                   data-mdb-ripple-init
                   data-mdb-ripple-color="dark"
                   data-mdb-popover-init
                   data-mdb-content="@($"<div class='text-black px-2 py-1 Popover-blur' " +
                                    $"style='box-shadow: rgba(14, 30, 37, 0.12) 0px 2px 4px 0px, rgba(14, 30, 37, 0.32) 0px 2px 16px 0px; border-radius: 8px'>Đính kèm file có kích thức tối đa là 20MB</div>")"
                   data-mdb-trigger="hover"
                   data-mdb-html="true"
                   data-mdb-placement="top">
                <i class="fa-solid fa-image position-absolute"
                   style="color: #473c38;
                  font-size: 18px;
                  top: 50%;
                  left: 50%;
                  transform: translate(-50%, -50%);"></i>
                @* Input *@
                <input type="file"
                       id="PreviewUploadFileContainer_Input"
                       class="d-none"
                       multiple
                       data-max-file-size="20MB"
                       data-max-files="10">
            </label>
            <div id="Message_Container"
                 style="padding: 0 12px 12px;
                        background-color: rgba(134, 142, 153, 0.1);
                        border-radius: 20px;
                        align-content: center;
                        transition: box-shadow 0.2s ease">
                @* Preview *@
                <div id="PreviewUploadFileContainer" class="w-100"
                     style="display: none; padding-top:12px; overflow-y: auto">

                </div>

                <div id="Message_Content"
                     contenteditable="true"
                     data-placeholder="Aa"
                     style="color: rgb(5,5,5);
                            font-size: .9375rem;
                            line-height: 1.34;
                            text-align: left;
                            font-weight: 400;
                            border: 0;
                            outline: 0;
                            max-height: 140px;
                            align-content: center;
                            overflow-y: auto;
                            overflow-x: hidden;
                            margin-top: 12px"></div>
            </div>

            <button id="btnSendMessage"
                    type="button"
                    onclick="sendGroupMessage('@Model.Id')"
                    class="btn btn-link rounded-circle position-relative align-self-end"
                    style="margin: 6px; height: 36px; width: 36px; padding: 0;"
                    data-mdb-ripple-init
                    data-mdb-ripple-color="dark"
                    data-mdb-popover-init
                    data-mdb-content="@($"<div class='text-black px-2 py-1 Popover-blur'" +
                                        $"style='box-shadow: rgba(14, 30, 37, 0.12) 0px 2px 4px 0px, rgba(14, 30, 37, 0.32) 0px 2px 16px 0px; border-radius: 8px'>Nhấn ENTER để gửi</div>")"
                    data-mdb-trigger="hover"
                    data-mdb-html="true"
                    data-mdb-placement="top">
                <i class="fa-solid fa-paper-plane position-absolute"
                   style="color: #473c38;
                          font-size: 18px;
                          top: 50%;
                          left: 50%;
                          transform: translate(-50%, -50%);"></i>
            </button>
        </div>
        <!-- Thông báo tin nhắn mới -->
        <div class="new-message-indicator d-none" id="newMessageIndicator" onclick="scrollToBottom()">
            <div class="new-msg-btn">
                <span class="badge-dot" id="messageCount"></span>
                <span class="text">Tin nhắn mới</span>
                <i class="fas fa-chevron-down icon"></i>
            </div>
        </div>
    </div>
</div>

<script>
    var currentPage = 1;
    var isLoading = false;
    var newMessageCount = 0;
    // Biến kiểm tra đã lấy hết dữ liệu trong db hay chưa
    var isDone = false;
    var MAX_FILE_SIZE_BYTES = 20 * 1024 * 1024;
    var hasLargeFile = false;
    var ArrayFile = []

    var newMessageIndicator = document.getElementById('newMessageIndicator');
    var messageCountBadge = document.getElementById('messageCount');
    var FileInput = document.getElementById('PreviewUploadFileContainer_Input')
    var PreviewUploadFileContainer = document.getElementById("PreviewUploadFileContainer");
    var btnUploadFile = document.getElementById("btnUploadFile");
    var ResponseMessageContainer = document.getElementById("ResponseMessageContainer")
    var ChatContainer = document.getElementById("ChatContainer")

    $(document).ready(function () {
        GetMessage()

        var MessageContent = document.getElementById("Message_Content");

        MessageContent.addEventListener("input", function () {
            if (this.innerHTML === "<br>") {
                this.innerHTML = ""
            }
        });

        // Box-shadow setting
        MessageContent.addEventListener("focus", function () {
            document.getElementById("Message_Container").style.boxShadow = "rgba(0, 0, 0, 0.15) 1.95px 1.95px 2.6px";

        });
        MessageContent.addEventListener("blur", function () {
            document.getElementById("Message_Container").style.boxShadow = "none";
        });

        MessageContent.addEventListener("paste", function (e) {
            e.preventDefault(); // Chặn paste mặc định (dán cả định dạng)

            // Lấy dữ liệu plain text từ clipboard
            const text = (e.clipboardData || window.clipboardData).getData("text");

            // Dán text vào vị trí con trỏ
            const selection = window.getSelection();
            if (!selection.rangeCount) return;

            selection.deleteFromDocument(); // Xoá nội dung được chọn hiện tại (nếu có)
            selection.getRangeAt(0).insertNode(document.createTextNode(text));

            // Di chuyển con trỏ sau đoạn văn bản vừa dán
            selection.collapseToEnd();
        });

        document.getElementById('Message_Content').addEventListener('keypress', function (e) {
            if (e.key === 'Enter') {
                if (e.shiftKey) {
                    // Người dùng nhấn Shift + Enter -> xuống dòng (mặc định)
                    return;
                } else {
                    // Chỉ nhấn Enter -> gửi tin nhắn
                    e.preventDefault();
                    sendGroupMessage('@Model.Id');
                }
            }
        });
        // Popover
        var optionPopover = {
            delay: { "show": 500, "hide": 100 },
            sanitize: false,
        }
        new mdb.Popover(document.getElementById("btnUploadFile"), optionPopover);
        new mdb.Popover(document.getElementById("btnSendMessage"), optionPopover);

        // Xử lý upload File
        FileInput.addEventListener('change', function (event) {
            const files = Array.from(event.target.files);

            // Nếu trong file Upload có 1 file lớn hơn 20MB thì dừng lại quá trình upload
            if (files.some(item => item.size > MAX_FILE_SIZE_BYTES)) {
                ShowThongBaoThatBai("File bạn chọn quá lớn. Kích thước tối đa là 20MB.")
                // Thực hiện xong thì xóa hết file
                FileInput.value = ''
                return;
            } else if (files.length + ArrayFile.length > 10) {
                ShowThongBaoThatBai("Tối đa 1 lần tải lên là 10 tệp")
                // Thực hiện xong thì xóa hết file
                FileInput.value = ''
                return;
            }

            if (ArrayFile.length === 0) {
                files.forEach(item => ArrayFile.push({ id: crypto.randomUUID(), data: item }))
                // Render File Preview
                RenderPreviewFileUpload()
            } else {
                files.forEach(item => {
                    var newItem = {
                        id: crypto.randomUUID(),
                        data: item
                    }

                    ArrayFile.push(newItem)
                    AddItemPreview(newItem)
                })
            }

            // Thực hiện xong thì xóa hết file
            FileInput.value = ''
        });
    });

    var ChatBox = document.getElementById('MessageWrapper');
    // Lắng nghe sự kiện cuộn
    ChatBox.addEventListener('scroll', () => {
        const scrollTop = ChatBox.scrollTop;
        const windowHeight = ChatBox.scrollHeight;
        const docHeight = ChatBox.clientHeight;

        if (scrollTop === 0) {
            GetMessage();
        }

        if (scrollTop + docHeight + 1 >= ChatBox.scrollHeight) {
            if (newMessageCount > 0) {
                hideNewMessageIndicator();
            }
        }
    });

    function GetMessage(isRefresh = false) {
        if (isRefresh) {
            var location = ChatBox.scrollHeight
            $.ajax({
                url: '@Url.Action("GetListPaging", "Message")',
                type: 'POST',
                data: {
                    UserId: '@ViewContext.GetClaimValue("UserId")',
                    TargetId: '@Model.Id',
                    PageIndex: 1,
                    RowPerPage: 15 * currentPage,
                    ConversationType: 1
                },
                success: function (data) {
                    if(data.isSuccess !== undefined && !data.isSuccess){
                        ShowThongBaoThatBai(data.message)
                    }else{
                        if (data.trim() !== '') {
                            document.getElementById('ChatContainer').innerHTML = data;

                            // Xử lý hiển thị thời gian, avartar và tên gọi
                            filterTimeDivs();
                            groupUserMessages();

                            if (currentPage === 1) {
                                scrollToBottom();
                            } else {
                                ChatBox.scrollTop = ChatBox.scrollHeight - location;
                            }

                            const $html = $('<div>').html(data);
                            if ($html.find('#welcome-flag[data-call-welcome="1"]').length) {
                                addWellcomeSession();
                            }

                            // Xử lý Popover ReactionMessage
                            var $htmlPopoverReactionMessage = $("<div>").html(data)
                            var messageReactionDiv = $html.find("div.MessageReaction")
                            if (messageReactionDiv.length > 0) {
                                var option = {
                                    trigger: "hover",
                                    sanitize: false,
                                    html: true,
                                    content: "",
                                    placement: "top",
                                    delay: { "show": 200, "hide": 100 },
                                }
                                const div = document.createElement("div")
                                div.style.backgroundColor = "#333"
                                div.style.color = "#fff"
                                div.style.boxShadow = "rgba(14, 30, 37, 0.12) 0px 2px 4px 0px, rgba(14, 30, 37, 0.32) 0px 2px 16px 0px"
                                div.style.borderRadius = "8px"
                                div.style.minWidth = "100px"
                                div.style.maxWidth = "100px"
                                div.style.padding = "4px 8px"
                                div.style.fontSize = "12px"

                                messageReactionDiv.each((index, element) => {
                                    var messageReaction = document.getElementById(element.id)
                                    div.innerHTML = element.getAttribute("data-content-popover")
                                    option.content = div.outerHTML
                                    new mdb.Popover(messageReaction, option)
                                })
                            }
                        }
                    }
                }
            });
        } else {
            if (isDone) return
            if (isLoading) return;
            isLoading = true;

            var location = ChatBox.scrollHeight
            $.ajax({
                url: '@Url.Action("GetListPaging", "Message")',
                type: 'POST',
                data: {
                    UserId: '@ViewContext.GetClaimValue("UserId")',
                    TargetId: '@Model.Id',
                    PageIndex: currentPage,
                    RowPerPage: 15,
                    ConversationType: 1
                },
                success: function (data) {
                    if(data.isSuccess !== undefined && !data.isSuccess){
                        ShowThongBaoThatBai(data.message)
                    }else{
                        if (data.trim() !== '') {
                            document.getElementById('ChatContainer').insertAdjacentHTML('afterbegin', data);
                            // Xử lý hiển thị thời gian, avartar và tên gọi
                            filterTimeDivs();
                            groupUserMessages();

                            if (currentPage === 1) {
                                scrollToBottom();
                            } else {
                                ChatBox.scrollTop = ChatBox.scrollHeight - location;
                            }
                            currentPage++;
                            isLoading = false;

                            const $html = $('<div>').html(data);
                            if ($html.find('#welcome-flag[data-call-welcome="1"]').length) {
                                addWellcomeSession();
                            }

                            // Xử lý Popover ReactionMessage
                            var $htmlPopoverReactionMessage = $("<div>").html(data)
                            var messageReactionDiv = $html.find("div.MessageReaction")
                            if (messageReactionDiv.length > 0) {
                                var option = {
                                    trigger: "hover",
                                    sanitize: false,
                                    html: true,
                                    content: "",
                                    placement: "top",
                                    delay: { "show": 200, "hide": 100 },
                                }
                                const div = document.createElement("div")
                                div.style.backgroundColor = "#333"
                                div.style.color = "#fff"
                                div.style.boxShadow = "rgba(14, 30, 37, 0.12) 0px 2px 4px 0px, rgba(14, 30, 37, 0.32) 0px 2px 16px 0px"
                                div.style.borderRadius = "8px"
                                div.style.minWidth = "100px"
                                div.style.maxWidth = "100px"
                                div.style.padding = "4px 8px"
                                div.style.fontSize = "12px"

                                messageReactionDiv.each((index, element) => {
                                    var messageReaction = document.getElementById(element.id)
                                    div.innerHTML = element.getAttribute("data-content-popover")
                                    option.content = div.outerHTML
                                    new mdb.Popover(messageReaction, option)
                                })
                            }
                        } else {
                            isDone = true;
                        }
                    }
                }
            });
        }
    }

    // Hiển thị thông báo tin nhắn mới
    function showNewMessageIndicator() {
        newMessageCount++;
        messageCountBadge.textContent = newMessageCount;
        messageCountBadge.parentNode.querySelector('span:nth-child(2)').textContent = newMessageCount === 1 ? 'tin nhắn mới' : 'tin nhắn mới';
        newMessageIndicator.classList.remove('d-none');
        newMessageIndicator.classList.remove('hiding');
    }

    // Ẩn thông báo tin nhắn mới
    function hideNewMessageIndicator() {
        newMessageIndicator.classList.add('hiding');
        setTimeout(() => {
            newMessageIndicator.classList.add('d-none');
            newMessageIndicator.classList.remove('hiding');
            newMessageCount = 0;
        }, 300);
    }
</script>

@* Script _MessageContainerPartial *@
<script>
    function addWellcomeSession() {
        const html = `
        <div class="p-3 pt-4" style="justify-items: center">
            @if (!string.IsNullOrEmpty(Model.AvartarUrl))
            {
                <img class="rounded-circle"
                        style="object-fit: cover; box-shadow: rgba(9, 30, 66, 0.25) 0px 4px 8px -2px, rgba(9, 30, 66, 0.08) 0px 0px 0px 1px;"
                        width="60" height="60"
                        src='@(Model.AvartarUrl)' />
            }
            else
            {
                <div class="circles-container mb-3">
                    @{
                        int countMember = Model.GroupMembers.Count <= 4 ? Model.GroupMembers.Count : 4;
                        int sub = 0;
                    }
                    @for (int i = 1; i <= countMember && i <= 4; i++)
                    {
                        if (i == 3 && Model.GroupMembers.Count > 4)
                        {
                            <div class="circle rounded-circle d-flex justify-content-center align-items-center text-white"
                                    style="background-color: grey; height: 40px; width: 40px;
                                        transform: translate(calc(-50% + @(pos[countMember][i-1].Item1)px), calc(-50% + @(pos[countMember][i-1].Item2)px));
                                        z-index: @( i switch
                                        {
                                            2 => 0,
                                            1 => 5,
                                            3 => 3,
                                            4 => 4
                                        } )">
                                @($"{Model.GroupMembers.Count - 3} +")
                            </div>
                            sub = 1;
                        }
                        else
                        {
                            <div class="circle rounded-circle d-flex justify-content-center align-items-center text-white"
                                    style="background: no-repeat center / cover url(@Model.GroupMembers[i - 1 - sub].User.ProfilePicture); height: 40px; width: 40px;
                                        transform: translate(calc(-50% + @(pos[countMember][i-1].Item1)px), calc(-50% + @(pos[countMember][i-1].Item2)px));
                                        z-index: @( i switch
                                        {
                                            2 => 0,
                                            1 => 5,
                                            3 => 3,
                                            4 => 4
                                        } )">
                            </div>
                        }
                    }
                </div>
            }

            <p class="fs-5 text-black my-3" style="font-weight: 600; line-height: 20px">@Model.GroupName</p>
            <p class="mb-2" style="line-height: 20px; font-size: .75rem; font-weight: 400; line-height: 16px">
                @($"{Model.NguoiTao} đã tạo nhóm này")
            </p>

            <div class="d-flex pt-2 pb-3">
                <div class="d-flex flex-column align-items-center" style="height: 54px; width: 72px">
                    <button type="button" data-mdb-ripple-init onclick="showModalAddMember()"
                            class="btn btn-light position-relative rounded-circle"
                            style="height: 0; width: 0; padding: 1.25rem">
                        <i class="fa-solid fa-user-plus position-absolute-center fs-6 text-brown-900"></i>
                    </button>
                    <p class="m-0 mt-2 text-black" style="font-weight: 400; font-size: 0.75rem">Thêm</p>
                </div>

                <div class="d-flex flex-column align-items-center" style="height: 54px; width: 72px">
                    <button type="button" data-mdb-ripple-init
                            class="btn btn-light position-relative rounded-circle"
                            style="height: 0; width: 0; padding: 1.25rem">
                        <i class="fa-solid fa-pen position-absolute-center fs-6 text-brown-900"></i>
                    </button>
                    <p class="m-0 mt-2 text-black" style="font-weight: 400; font-size: 0.75rem">Tên</p>
                </div>
            </div>
        </div>`

        document.getElementById("ChatContainer").insertAdjacentHTML('afterbegin', html);

        // Xác nhận đã tải hết tin nhắn
        isDone = true;
    }

    function showModalAddMember() {
        showLoading(true)
        $.ajax({
            url: "@Url.Action("ShowModalAddMember", "Group")",
            type: "POST",
            data: {
                UserId: "@ViewContext.GetClaimValue("UserId")",
                GroupId: "@Model.Id",
                PageIndex: 1,
                RowPerPage: 15
            },
            success: function (response) {
                if (response.isSuccess === undefined) {
                    ShowModal(response, "md", ['modal-dialog-scrollable'])
                } else {
                    ShowThongBaoThatBai(response.message)
                }
                showLoading(false)
            },
            error: function (xhr, error) {
                ShowThongBaoThatBai(error)
                showLoading(false)
            }
        })
    }
</script>

@* Xử lý Upload file *@
<script>
    var btnAddFile = `<label for="PreviewUploadFileContainer_Input"
                               class="btn btn-secondary"
                               style="padding: 12px; margin: 2px 12px 0 0; height: 48px"
                               data-mdb-ripple-init>
                            <i class="fa-solid fa-file-circle-plus text-black" style="font-size: 24px"></i>
                        </label>`
    // Render Preview FileUpload
    function RenderPreviewFileUpload() {
        if (ArrayFile.length == 0) {
            PreviewUploadFileContainer.style.display = "none"
            PreviewUploadFileContainer.innerHTML = ''

            showUploadButton()
        } else {
            PreviewUploadFileContainer.innerHTML = btnAddFile

            // Tạo các Preview
            ArrayFile.forEach(item => AddItemPreview(item))

            // Hiển thị Preview và ẩn đi
            PreviewUploadFileContainer.style.display = "flex"
            hideUploadButton();
        }
    }

    // Add Item
    function AddItemPreview(item) {
        const file = item.data

        // Tạo URL tạm
        const url = URL.createObjectURL(file);

        // Tạo div chứa content và btnRemove
        const div = document.createElement('div');
        div.className = 'PreviewFileContent'
        div.style.margin = "2px 12px 6px 0"
        div.setAttribute('data-id', item.id);

        // Xử lý từng trường hợp
        // Hình ảnh
        if (file.type.startsWith('image/')) {
            var content = document.createElement('img')

            // Xử lý dữ liệu
            content.className = 'rounded-2'
            content.src = url;
            content.style.height = "48px";
            content.style.width = "48px";
            content.style.objectFit = "cover"

            // Gán vào div
            div.appendChild(content)
        }
        // Video
        else if (file.type.startsWith('video/')) {
            // Content
            var content = document.createElement('video')
            content.className = 'rounded-2'
            content.src = url;
            content.style.height = "48px";
            content.style.width = "48px";
            content.style.objectFit = "cover"

            // Icon Play
            var icon = document.createElement('div')
            icon.className = "rounded-circle position-absolute d-flex align-items-center justify-content-center"
            icon.style.padding = "0 6px"
            icon.style.backgroundColor = "rgba(0,0,0, 0.3)"
            icon.style.top = "12px"
            icon.style.right = "12px"
            icon.style.width = "24px"
            icon.innerHTML = '<i class="fa-solid fa-play text-white" style="line-height: 24px; font-size: 12px"></i>'

            // Gán vào div
            div.appendChild(content)
            div.appendChild(icon)
        }
        // File khác
        else {
            div.classList.add("rounded-2")
            div.style.display = "flex"
            div.style.alignItems = "center"
            div.style.backgroundColor = "rgb(225.6, 233.7, 247.05)"
            div.style.minWidth = "128px"
            div.style.maxWidth = "128px"
            div.style.height = "48px";
            div.style.padding = "0 8px"

            // Content
            var content = document.createElement('span')
            content.className = 'text-black text-start'
            content.style.webkitBoxOrient = "vertical"
            content.style.webkitLineClamp = 2;
            content.style.display = "-webkit-box"
            content.style.overflow = "hidden"
            content.style.lineHeight = "20px"
            content.style.fontSize = "14px"
            content.innerText = file.name;

            // Icon doc
            var icon = document.createElement('div')
            icon.className = 'bg-white rounded-circle'
            icon.style.padding = '0 10px'
            icon.style.marginRight = "10px"
            icon.style.height = '32px'
            icon.innerHTML = '<i class="fa-solid fa-file-lines text-black" style="line-height: 32px; font-size: 16px"></i>'

            // Gán vào div
            div.appendChild(icon)
            div.appendChild(content)
        }

        // Tạo Btn remove
        var btnRemove = document.createElement('button')
        btnRemove.className = 'btn btn-floating PreviewFileContent_BtnRemove text-black'
        btnRemove.style.width = 0;
        btnRemove.style.height = 0;
        btnRemove.style.padding = '12px'
        btnRemove.innerHTML = '<i class="fa-solid fa-xmark"></i>'
        btnRemove.onclick = function () {
            RemoveItemPreview(item.id)
        };

        // Gán vào div
        div.appendChild(btnRemove)

        // Gán div vào Container
        PreviewUploadFileContainer.appendChild(div)
    }

    // Remove Item
    function RemoveItemPreview(idToRemove) {
        ArrayFile = ArrayFile.filter(item => item.id !== idToRemove);

        const fileDiv = PreviewUploadFileContainer.querySelector(`.PreviewFileContent[data-id="${idToRemove}"]`);

        // Nếu tồn tại thì xóa khỏi DOM
        if (fileDiv) {
            PreviewUploadFileContainer.removeChild(fileDiv);

            // Ẩn đi container
            if (ArrayFile.length === 0) {
                PreviewUploadFileContainer.style.display = "none"
                PreviewUploadFileContainer.innerHTML = ''

                showUploadButton();
            }
        }
    }

    // Helper
    function hideUploadButton() {
        document.getElementById('btnUploadFile').classList.add('hide');
        document.getElementById('Message_Container').classList.add('expanded');
    }
    function showUploadButton() {
        document.getElementById('btnUploadFile').classList.remove('hide');
        document.getElementById('Message_Container').classList.remove('expanded');
    }
</script>