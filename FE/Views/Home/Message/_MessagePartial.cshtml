@model MODELS.USER.Dtos.MODELUser
@* Style _MessagePartial.cshtml *@
<style>
    #Message_Content:empty::before {
        content: attr(data-placeholder);
        color: gray;
        pointer-events: none;
    }

    #MessageContainer {
        display: flex;
        height: 100%
    }
</style>

@* Style _MessageContainerPartial *@
<style>
    /* Container cha */
    .Mwrapper {
        container-type: inline-size; /* Theo dõi chiều rộng của container */
        height: 100%;
        width: 100%;
        place-content: end;
    }

    .profile-card {
        width: 400px;
        justify-self: center;
        overflow: hidden;
        box-shadow: rgba(0, 0, 0, 0.4) 0px 2px 4px, rgba(0, 0, 0, 0.3) 0px 7px 13px -3px, rgba(0, 0, 0, 0.2) 0px -3px 0px inset;
    }

    .MyMessage {
        background-color: #543310;
        color: white;
        place-self: flex-end
    }

    .OtherMessage {
        background-color: rgba(134, 142, 153, 0.3);
        color: black;
    }

    /* Container Query */
    /* Khi container nhỏ hơn 420px*/
    @@container (max-width: 420px) {
        .profile-card {
            width: 360px
        }
    }

    /* Khi container nhỏ hơn 380px*/
    /* Khi container nhỏ hơn 420px*/
    @@container (max-width: 380px) {
        .profile-card {
            width: 300px
        }

        .FirstMessageSuggestion {
            display: none
        }
    }
</style>

@Html.Hidden("TargetId", Model.Id)

<div class="card text-center flex-grow-1 h-100"
     style="box-shadow: rgba(0, 0, 0, 0.4) 0px 2px 4px, rgba(0, 0, 0, 0.3) 0px 7px 13px -3px, rgba(0, 0, 0, 0.2) 0px -3px 0px inset;">
    <div class="card-header d-flex justify-content-between position-relative"
         style="padding: 10px 12px; box-shadow: rgba(0, 0, 0, 0.15) 0px 3px 3px 0px; border: 0">
        <div class="d-flex">
            <img class="rounded-circle"
                 style="margin: 6px; object-fit: cover; box-shadow: rgba(9, 30, 66, 0.25) 0px 4px 8px -2px, rgba(9, 30, 66, 0.08) 0px 0px 0px 1px;"
                 width="36" height="36"
                 src='@(Model.ProfilePicture)' />
            <div class="d-flex align-items-center"
                 style="padding: 6px 6px 6px 2px; color: rgb(5,5,5); font-size: 15px; font-weight: 500; line-height: 20px">
                <span style="text-align: start">@Model.HoVaTen</span>
            </div>
        </div>
        <div class="d-flex">
            <button type="button"
                    class="btn btn-link rounded-circle position-relative"
                    style="margin: 6px; height: 36px; width: 36px; padding: 0"
                    data-mdb-ripple-init
                    data-mdb-ripple-color="dark">
                <i class="fa-solid fa-phone position-absolute"
                   style="color: #473c38;
                          font-size: 18px;
                          top: 50%;
                          left: 50%;
                          transform: translate(-50%, -50%);"></i>
            </button>
            <button type="button"
                    class="btn btn-link rounded-circle position-relative"
                    style="margin: 6px; height: 36px; width: 36px; padding: 0"
                    data-mdb-ripple-init
                    data-mdb-ripple-color="dark">
                <i class="fa-solid fa-video position-absolute"
                   style="color: #473c38;
                          font-size: 18px;
                          top: 50%;
                          left: 50%;
                          transform: translate(-50%, -50%);"></i>
            </button>
            <button type="button"
                    class="btn btn-link rounded-circle position-relative"
                    style="margin: 6px; height: 36px; width: 36px; padding: 0"
                    data-mdb-ripple-init
                    data-mdb-ripple-color="dark">
                <i class="fa-solid fa-ellipsis position-absolute"
                   style="color: #473c38;
                          font-size: 18px;
                          top: 50%;
                          left: 50%;
                          transform: translate(-50%, -50%);"></i>
            </button>
        </div>
    </div>

    <div id="MessageWrapper" class="card-body p-0" style="height: calc(100% - 136px); overflow: auto">
        <div id="FriendStatus" class="position-absolute position-absolute w-100"></div>
        <div id="MessageContainer">
            <div class="Mwrapper">
                <div id="ChatContainer" class="container"></div>
            </div>
        </div>
    </div>

    <div class="card-footer d-flex border-0"
         style="padding: 10px 8px">
        <button type="button"
                class="btn btn-link rounded-circle position-relative align-self-end"
                style="margin: 6px; height: 36px; width: 36px; padding: 0"
                data-mdb-ripple-init
                data-mdb-ripple-color="dark">
            <i class="fa-solid fa-image position-absolute"
               style="color: #473c38;
              font-size: 18px;
              top: 50%;
              left: 50%;
              transform: translate(-50%, -50%);"></i>
        </button>
        <div id="Message_Container"
             style="padding: 12px;
                    background-color: rgba(134, 142, 153, 0.1);
                    border-radius: 20px;
                    width: calc(100% - 96px);
                    align-content: center;
                    transition: box-shadow 0.2s ease">
            <div id="Message_Content"
                 contenteditable="true"
                 data-placeholder="Aa"
                 style="color: rgb(5,5,5);
                        font-size: .9375rem;
                        line-height: 1.34;
                        text-align: left;
                        font-weight: 400;
                        border: 0;
                        outline: 0;
                        max-height: 140px;
                        align-content: center;
                        overflow-y: auto;
                        overflow-x: hidden"></div>
        </div>
        <button id="btnSendMessage"
                type="button"
                onclick="sendMessage('@Model.Id')"
                class="btn btn-link rounded-circle position-relative align-self-end"
                style="margin: 6px; height: 36px; width: 36px; padding: 0;"
                data-mdb-ripple-init
                data-mdb-ripple-color="dark">
            <i class="fa-solid fa-paper-plane position-absolute"
               style="color: #473c38;
                      font-size: 18px;
                      top: 50%;
                      left: 50%;
                      transform: translate(-50%, -50%);"></i>
        </button>
    </div>
</div>

@* Script _MessagePartial *@
<script>
    var currentPage = 1;
    var isLoading = false;
    // Biến kiểm tra đã lấy hết dữ liệu trong db hay chưa
    var isDone = false;

    $(document).ready(function () {
        GetFriendRequestStatus();
        GetMessage()

        var MessageContent = document.getElementById("Message_Content");

        MessageContent.addEventListener("input", function () {
            if (this.innerHTML === "<br>") {
                this.innerHTML = ""
            }
        });

        // Box-shadow setting
        MessageContent.addEventListener("focus", function () {
            document.getElementById("Message_Container").style.boxShadow = "rgba(0, 0, 0, 0.15) 1.95px 1.95px 2.6px";

        });
        MessageContent.addEventListener("blur", function () {
            document.getElementById("Message_Container").style.boxShadow = "none";
        });

        MessageContent.addEventListener("paste", function (e) {
            e.preventDefault(); // Chặn paste mặc định (dán cả định dạng)

            // Lấy dữ liệu plain text từ clipboard
            const text = (e.clipboardData || window.clipboardData).getData("text");

            // Dán text vào vị trí con trỏ
            const selection = window.getSelection();
            if (!selection.rangeCount) return;

            selection.deleteFromDocument(); // Xoá nội dung được chọn hiện tại (nếu có)
            selection.getRangeAt(0).insertNode(document.createTextNode(text));

            // Di chuyển con trỏ sau đoạn văn bản vừa dán
            selection.collapseToEnd();
        });

        document.getElementById('Message_Content').addEventListener('keypress', function (e) {
            if (e.key === 'Enter') {
                if (e.shiftKey) {
                    // Người dùng nhấn Shift + Enter -> xuống dòng (mặc định)
                    return;
                } else {
                    // Chỉ nhấn Enter -> gửi tin nhắn
                    e.preventDefault();
                    sendMessage('@Model.Id');
                }
            }
        });
    });

    var ChatBox = document.getElementById('MessageWrapper');
    // Lắng nghe sự kiện cuộn
    ChatBox.addEventListener('scroll', () => {
        const scrollTop = ChatBox.scrollTop;
        const windowHeight = ChatBox.scrollHeight;
        const docHeight = ChatBox.clientHeight;

        if (scrollTop === 0) {
            GetMessage();
        }
    });

    function ShowPopupAddFriend() {
        $.ajax({
            url: '@Url.Action("ShowAddFriendPopup", "Friend")',
            type: 'GET',
            data: { Id: '@Model.Id' },
            success: function (data) {
                ShowModal(data, "md")
            }
        });
    }

    function GetFriendRequestStatus() {
        $.ajax({
            url: '@Url.Action("GetFriendRequestStatus", "Message")',
            type: 'GET',
            data: { Id: '@Model.Id' },
            success: function (data) {
                $("#FriendStatus").html(data)
            }
        });
    }

    function GetMessage() {
        if (isDone) return
        if (isLoading) return;
        isLoading = true;

        var location = ChatBox.scrollHeight
        $.ajax({
            url: '@Url.Action("GetListPaging", "Message")',
            type: 'POST',
            data: {
                CurrentId: '@User.Claims.FirstOrDefault(c => c.Type == "UserId").Value',
                FriendId: '@Model.Id',
                PageIndex: currentPage,
                RowPerPage: 15
            },
            success: function (data) {
                if (data.trim() !== '') {
                    document.getElementById('ChatContainer').insertAdjacentHTML('afterbegin', data);
                    filterTimeDivs();
                    if (currentPage === 1) {
                        scrollToBottom();
                    } else {
                        ChatBox.scrollTop = ChatBox.scrollHeight - location;
                    }
                    currentPage++;
                    isLoading = false;
                } else {
                    isDone = true;
                }
            }
        });
    }
</script>

@* Script _MessageContainerPartial *@
<script>
    function scrollToBottom() {
        const chatBox = document.getElementById("MessageWrapper");
        chatBox.scrollTop = chatBox.scrollHeight;
    }

    // Append tin nhắn
    function appendMessage(sender, message, ngaytao) {
        // Ẩn profile card
        const profileCard = document.querySelector('.profile-card');
        if (profileCard) {
            profileCard.style.display = 'none';
        }

        // Tạo tin nhắn
        const div = document.createElement("div");
        div.innerHTML = `
                        <div class="lh-1 py-3"
                            style="font-size: 12px">${ngaytao}</div>
                        <div class="row align-items-center ${sender === '@User.Claims.FirstOrDefault(c => c.Type == "UserId").Value' ? "flex-row-reverse" : ""}" style="margin-bottom: 12px;">
                            <div style="width: 48px; display: ${sender === '@User.Claims.FirstOrDefault(c => c.Type == "UserId").Value' ? "none" : "auto"}">
                                <img class="rounded-circle"
                                     src="@Model.ProfilePicture"
                                     style="height: 38px; width: 38px" />

                            </div>
                            <div style="width: 70%;">
                                <p class="m-0 ${sender === '@User.Claims.FirstOrDefault(c => c.Type == "UserId").Value' ? 'MyMessage' : 'OtherMessage'}"
                                   style="font-size: 14px;
                                          width: fit-content;
                                          padding: 8px 12px;
                                          border-radius: 18px;
                                          text-align: justify;
                                          font-weight: 400;
                                          box-shadow: rgba(50, 50, 93, 0.25) 0px 2px 5px -1px, rgba(0, 0, 0, 0.3) 0px 1px 3px -1px; ">
                                      ${message}
                                </p>
                            </div>
                            <div style="width: calc(30% - 48px)"></div>
                        </div>`;
        document.getElementById("ChatContainer").appendChild(div);

        // Gọi lại hàm xử lý display thời gian tạo tin nhắn
        filterTimeDivs();
    }
</script>

@* Script xử lý hiển thị thời gian *@
<script>
    function parseVietnameseDate(dateStr) {
        const regex = /(\d{2}):(\d{2}) (\d{2}) tháng (\d{2}), (\d{4})/;
        const match = dateStr.match(regex);
        if (!match) return null;

        const [_, hour, minute, day, month, year] = match.map(Number);
        return new Date(year, month - 1, day, hour, minute);
    }

    // Hàm hiển thị thời gian tin nhắn
    // Nếu 2 tin nhắn cách nhau hơn 30 phút sẽ hiển thị thời gian
    // Thời gian sẽ được so sánh với tin nhắn trước đó
    function filterTimeDivs() {
        const container = document.getElementById("ChatContainer");
        const timeDivs = Array.from(container.querySelectorAll("div.lh-1.py-3"));

        let prevTime = null;

        timeDivs.forEach((div, index) => {
            const currentTime = parseVietnameseDate(div.textContent.trim());

            if (!currentTime) return;

            if (index === 0) {
                div.style.display = "block";
                prevTime = currentTime;
                return;
            }

            const diffMinutes = (currentTime - prevTime) / 1000 / 60;

            if (diffMinutes >= 30) {
                div.style.display = "block";
                prevTime = currentTime;
            } else {
                div.style.display = "none";
            }
        });
    }
</script>
