<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="utf-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>@ViewData["Title"] - LinkU</title>
        <link rel="icon" type="image/x-icon" href="~/asset/Icon.png">
        @* <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous"> *@
        <link rel="stylesheet" href="/css/DatePicker.css" />
        <script src="https://kit.fontawesome.com/61ba0c914b.js" crossorigin="anonymous"></script>
        <!-- Google Fonts And Icons -->
        <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap"
              rel="stylesheet" />
        <link href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL@20..48,400..700,0..1&icon_names=add_a_photo,group,group_add,left_panel_open,person,person_add&display=block" rel="stylesheet" />
        <!-- MDB -->
        <link href="https://cdnjs.cloudflare.com/ajax/libs/mdb-ui-kit/8.1.0/mdb.min.css"
              rel="stylesheet" />
        <!-- Jquery -->
        <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js" integrity="sha512-v2CJ7UaYy4JwqLDIrZUI/4hqeoQieOmAZNXBeQyjo21dadnwR+8ZaIJVT8EE2iyI61OV8e6M8PP2/4hpQINQ/g==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
        <!-- Jquery UI -->
        <script src='https://cdnjs.cloudflare.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.js'></script>
        <!-- Jquery validate -->
        <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.5/jquery.validate.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validation-unobtrusive/4.0.0/jquery.validate.unobtrusive.js"></script>
        <!-- Custom css -->
        <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
        <link rel="stylesheet" href="~/css/FullPalette.css" asp-append-version="true" />
        <!-- Signalr -->
        <script src="~/lib/microsoft/signalr/dist/browser/signalr.min.js"></script>
        <!-- Datepicker -->
        <script type="text/javascript" src="/js/datepicker-vi.js"></script>
        <!-- FilePond: Upload File-->
        <link href="https://unpkg.com/filepond/dist/filepond.css" rel="stylesheet" />
        <!-- FilePond plugins CSS -->
        <link href="https://unpkg.com/filepond-plugin-image-preview/dist/filepond-plugin-image-preview.min.css" rel="stylesheet" />
    </head>
    <body>
        <div style="margin: 16px 0; padding: 0px 16px;">
            @RenderBody()
        </div>

        @Html.Partial("~/Views/Shared/Modal/_ModalPartial.cshtml")

        <!-- Audio Notification -->
        <audio id="notificationSound"
               src="~/audio/notification.mp3"
               preload="auto">
        </audio>
        <!-- Popover -->
        <script src="https://cdn.jsdelivr.net/npm/@@popperjs/core@2.11.8/dist/umd/popper.min.js" integrity="sha384-I7E8VVD/ismYTF4hNIPjVp/Zjvgyol6VFvRkX/vR+Vc4jQkC+hVqc2pM8ODewa9r" crossorigin="anonymous"></script>
        <!-- Bootstrap -->
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
        <!-- MDB -->
        <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/mdb-ui-kit/8.1.0/mdb.umd.min.js"></script>
        <!-- Custom js -->
        <script src="~/js/site.js" asp-append-version="true"></script>
        <!-- Script Show Loading -->
        <script src="https://malsup.github.io/jquery.blockUI.js"></script>
        <!-- File Upload -->
        <script src="https://unpkg.com/filepond/dist/filepond.js"></script>
        <!-- FilePond plugins -->
        <!-- Image Preview -->
        <script src="https://unpkg.com/filepond-plugin-image-preview/dist/filepond-plugin-image-preview.min.js"></script>
        <!-- Validate Size -->
        <script src="https://unpkg.com/filepond-plugin-file-validate-size/dist/filepond-plugin-file-validate-size.min.js"></script>
        <!-- Validate Type -->
        <script src="https://unpkg.com/filepond-plugin-file-validate-type/dist/filepond-plugin-file-validate-type.js"></script>
        <!-- Exif Orientation -->
        <script src="https://unpkg.com/filepond-plugin-image-exif-orientation/dist/filepond-plugin-image-exif-orientation.js"></script>
        <!-- Image Crop -->
        <script src="https://unpkg.com/filepond-plugin-image-crop/dist/filepond-plugin-image-crop.js"></script>
        <!-- Image Resize -->
        <script src="https://unpkg.com/filepond-plugin-image-resize/dist/filepond-plugin-image-resize.js"></script>
        <!-- Image Transform -->
        <script src="https://unpkg.com/filepond-plugin-image-transform/dist/filepond-plugin-image-transform.js"></script>
        <!-- Image Encode -->
        <script src="https://unpkg.com/filepond-plugin-file-encode/dist/filepond-plugin-file-encode.min.js"></script>
        @await RenderSectionAsync("Scripts", required: false)
        @section Scripts {
            <partial name="_ValidationScriptsPartial" />
        }

        <script>
        // Kết nối tới Hub SignalR từ API
        const connection = new signalR.HubConnectionBuilder()
                                    .withUrl('https://localhost:7181/messageHub?userid=@(User.Claims.FirstOrDefault(c => c.Type == "UserId").Value)') // URL API SignalR hub
                                    .withAutomaticReconnect()
                                    .build();

        // Hàm Start SignalR
        async function start() {
            try {
                await connection.start();
                console.log("SignalR Connected.");
            } catch (err) {
                console.log(err);
                setTimeout(start, 5000);
            }
        };

        // Tự động kết nối lại
        connection.onclose(async () => {
            await start();
        });

        // Start the connection.
        start();

            // Send message
        function sendMessage(receiverId) {
            if ($('#Message_Content').text() !== '' && ArrayFile.length == 0) {
                var refid = ResponseMessageContainer.querySelector(`div[data-message-id]`)

                var data = {
                    SenderId: '@User.Claims.FirstOrDefault(c => c.Type == "UserId").Value',
                    TargetId: receiverId,
                    Content: document.getElementById('Message_Content').innerHTML.trim(),
                    RefId: refid === null ? null : refid.getAttribute("data-message-id")
                }

                // Gửi tin nhắn bình thường (Chỉ có text)
                connection.invoke("SendPrivateMessage", data);
                $('#Message_Content').html('')
                HideResponseMessageContainer()
            } else {
                if (ArrayFile.length > 0) {
                    sendMessageWithFile(receiverId, 0);
                }
            }
        }

        // Send Message In Group
        function sendGroupMessage(groupId) {
            if ($('#Message_Content').text() !== '' && ArrayFile.length == 0) {
                var refid = ResponseMessageContainer.querySelector(`div[data-message-id]`)
                // Chuẩn bị data
                var data = {
                    SenderId: '@ViewContext.GetClaimValue("UserId")',
                    TargetId: groupId,
                    Content: document.getElementById('Message_Content').innerHTML.trim(),
                    RefId: refid === null ? null : refid.getAttribute("data-message-id")
                }

                connection.invoke("SendGroupMessage", data)
                    .then(result => {
                        if (result.error) {
                            ShowThongBaoThatBai(result.message)
                        }
                    })
                    .catch(err => {
                        ShowThongBaoThatBai("Lỗi hệ thống: " + result.message)
                    });

                $('#Message_Content').html('')
                HideResponseMessageContainer()
            } else {
                if (ArrayFile.length > 0) {
                    sendMessageWithFile(groupId, 1);
                }
            }
        }

        function updateConversationLatestMessage(targetId) {
            var data = {
                UserId: '@ViewContext.GetClaimValue("UserId")',
                TargetId: targetId
            }

            connection.invoke("UpdateConversationLatestMessage", data)
                .then(result => {
                    if (result.error) {
                        ShowThongBaoThatBai(result.message)
                    } else {
                        GetListPagingConversation(PageIndexConversation, RowPerPageConversation, () => { setActiveButton(targetId) })
                    }
                })
                .catch(err => {
                    ShowThongBaoThatBai("Lỗi hệ thống: " + result.message)
                });
        }

        function SendRequestWSRerenderTab(userids, tab) {
            var data = {
                UserIds: userids,
                TabName: tab
            }
            connection.invoke("RequestRerenderTab", data)
                .then(result => {
                    if (result.error) {
                        ShowThongBaoThatBai("Lỗi hệ thống: " + result.message)
                    }
                })
                .catch(err => {
                    ShowThongBaoThatBai("Lỗi hệ thống: " + err)
                });
        }

        function sendMessageWithFile(receiverId, conversationType) {
            var refid = ResponseMessageContainer.querySelector(`div[data-message-id]`)
            var formData = new FormData();
            ArrayFile.forEach(item => {
                formData.append("files", item.data);
            })
            formData.append("Content", $('#Message_Content').text());
            formData.append("TargetId", receiverId)
            formData.append("RefId", refid === null ? null : refid.getAttribute("data-message-id"))
            formData.append("ConversationType", conversationType)

            $.ajax({
                url: "@Url.Action("SendMessageWithFile", "Message")",
                type: "POST",
                data: formData,
                processData: false,
                contentType: false,
                success: function (response) {
                    if (response.isSuccess) {
                        $('#Message_Content').html('')
                        ArrayFile = []
                        RenderPreviewFileUpload();

                        // Append Message
                        response.data.forEach(item => {
                            if (item.isMyResponse) {
                                // Rerender Conversation
                                GetListPagingConversation(PageIndexConversation, RowPerPageConversation, () => { setActiveButton(receiverId) })

                                // Append Mesage
                                document.getElementById("ChatContainer").insertAdjacentHTML("beforeend", item.html);

                                // Gọi lại hàm xử lý display thời gian tạo, tên và ảnh đại diện của người tạo tin nhắn
                                filterTimeDivs();
                                groupUserMessages();

                                // Cuộn đến Bottom
                                scrollToBottom();

                                HideResponseMessageContainer()
                            } else {
                                var data = {
                                    SenderId: '@ViewContext.GetClaimValue("UserId")',
                                    TargetId: receiverId,
                                    ConversationType: conversationType,
                                    HtmlMessage: item.html
                                }

                                connection.invoke("RequestAppendMessage", data)
                                    .then(result => {
                                        if (result.error) {
                                            ShowThongBaoThatBai(result.message)
                                        }
                                    })
                                    .catch(err => {
                                        ShowThongBaoThatBai("Lỗi hệ thống: " + result.message)
                                    });
                            }
                        })
                    } else {
                        ShowThongBaoThatBai(response.message)
                    }
                },
                error: function (xhr, error) {
                    ShowThongBaoThatBai(error)
                }
            })
        }

        // Append tin nhắn
        function appendMessage(data, conversationtype = 0, callback) {
            // Ẩn profile card
            const profileCard = document.querySelector('.profile-card');
            if (profileCard) {
                profileCard.style.display = 'none';
            }

            // Call Ajax để lấy HTML
             $.ajax({
                 url: "@Url.Action("GetMessageHtml", "Message")",
                 type: "POST",
                 data: {
                     request: JSON.stringify(data),
                     ConversationType: conversationtype
                 },
                 success: function (response) {
                     showLoading(false)
                     if (response.isSuccess === undefined) {
                         document.getElementById("ChatContainer").insertAdjacentHTML("beforeend", response);

                         if (typeof callback === 'function') {
                             callback()
                         }
                     } else {
                         ShowThongBaoThatBai(response.message)
                     }
                 },
                 error: function (xhr, error) {
                     showLoading(false)
                     ShowThongBaoThatBai(error)
                 }
             })
        }

        // Hàm nhận yêu cầu kết bạn từ server
        connection.off("UpdateFriendRequest");
        connection.on("UpdateFriendRequest", function (response) {
            // Cập nhật _TabFriendRequestPartial.cshtml
            renderTabFriendRequest()
            var TargetId = $('#TargetId').val();
            // Cập nhật _FriendRequestStatusPartial.cshtml
            if (TargetId === response.data.senderId || TargetId === response.data.receiverId) {
                GetFriendRequestStatus()
            }
        });

        // Hàm nhận tin nhắn từ server
        connection.off("ReceiveMessage");
        connection.on("ReceiveMessage", function (response) {
            // Example Respnose:
            //{
            //    "success": true,
            //    "message": null,
            //    "data": {
            //      "senderId": "Guid",
            //      "targetId": "Guid"
            //      "message": "hello bạn",
            //      "dateTime": "09:13 15 tháng 05, 2025"
            //    }
            //}
            if (!response.success) {
                ShowThongBaoThatBai(response.message)
            } else {
                var TargetId = $("#TargetId").val()
                var ConversationType = $("#ConversationType").val()

                // Rerender Conversation
                GetListPagingConversation(PageIndexConversation, RowPerPageConversation, () => { setActiveButton(TargetId) })

                if ('@ViewContext.GetClaimValue("UserId")' !== response.data.data[0].senderId) {
                    playNotification();
                }

                // Xử lý khi Tab Message đã được tải
                if (TargetId === response.data.data[0].senderId || TargetId === response.data.data[0].targetId) {
                    // Update lastread message cho người nhận
                    // Vì người gửi đã được cập nhật latest mesage lúc gửi tin nhắn
                    updateConversationLatestMessage(TargetId)

                    // Thêm 1 tin nhắn
                    appendMessage(response.data, ConversationType, () => {
                        // Gọi lại hàm xử lý display thời gian tạo, tên và ảnh đại diện của người tạo tin nhắn
                        filterTimeDivs();
                        groupUserMessages();

                        // Scroll Message tới cuối cùng
                        var scrollTop = document.getElementById('MessageWrapper').scrollTop;
                        var scrollHeight = document.getElementById('MessageWrapper').scrollHeight;
                        var clientHeight = document.getElementById('MessageWrapper').clientHeight;

                        // Nếu scroll hiện tại không quá 10 tin nhắn hoặc tôi là người gửi tin nhắn
                        // thì sẽ hiển 1 biểu tượng có tin nhắn mới
                        if (scrollHeight - scrollTop - clientHeight <= 275 || '@ViewContext.GetClaimValue("UserId")' === response.data.data[0].senderId) {
                            scrollToBottom()
                        } else {
                            showNewMessageIndicator();
                        }
                    });

                }
            }
        });

        // Nhận yêu cầu refresh tab
        connection.off("ReceiveRequestRerenderTab");
        connection.on("ReceiveRequestRerenderTab", function (response)
        {
            if (response.success) {
                switch (response.data) {
                    // Rerender Conversation
                    case "Conversation":
                        var TargetId = $("#TargetId").val()
                        GetListPagingConversation(PageIndexConversation, RowPerPageConversation, () => { setActiveButton(TargetId) })
                        break;

                    // Rerender GroupRequest
                    case "GroupRequest":
                        getListPaginggroupRequest(null, null, true, null);
                        break;
                }
            }
        });

        // Nhận yêu cầu refresh tab
        connection.off("UpdateFriendshipTab");
        connection.on("UpdateFriendshipTab", function (response) {
            if (response.success) {
                getListPagingFriendship(1, friendshipRowPerPage * friendshipPageIndex, true);
            }
        });

        // Nhận yêu cầu refresh tab khi có thành viên mới tham gia nhóm
        connection.off("ReceiveRequestRerenderTabOfGroupMember");
        connection.on("ReceiveRequestRerenderTabOfGroupMember", function (response) {
            if (!response.success) {
                ShowThongBaoThatBai(response.message)
            } else {
                var TargetId = $("#TargetId").val()
                // Rerender Conversation
                GetListPagingConversation(PageIndexConversation, RowPerPageConversation, () => { setActiveButton(TargetId) })

                // Refresh Group
                GetListPagingGroup(groupPageIndex, groupRowPerPage, true);

                // Xử lý khi Tab Message đã được tải
                if (TargetId === response.data || TargetId === response.data) {
                    // Update lại tin nhắn mới nhất
                    updateConversationLatestMessage(TargetId)
                    // Refresh lại trang
                    GetMessage(true)
                }
            }
        });

        // Hàm nhận tin nhắn có chứa file
        connection.off("ReceiveRequestAppendMessage");
        connection.on("ReceiveRequestAppendMessage", function (response) {
            if (!response.success) {
                ShowThongBaoThatBai(response.message)
            } else {
                var TargetId = $("#TargetId").val()

                // Rerender Conversation
                GetListPagingConversation(PageIndexConversation, RowPerPageConversation, () => { setActiveButton(TargetId) })

                if ('@ViewContext.GetClaimValue("UserId")' !== response.data.senderId) {
                    playNotification();
                }

                // Xử lý khi Tab Message đã được tải
                if (TargetId === response.data.senderId || TargetId === response.data.targetId) {
                    // Update lastread message cho người nhận
                    // Vì người gửi đã được cập nhật latest mesage lúc gửi tin nhắn
                    updateConversationLatestMessage(TargetId)

                    // Append tin nhắn
                    document.getElementById("ChatContainer").insertAdjacentHTML("beforeend", response.data.html);

                    // Gọi lại hàm xử lý display thời gian tạo, tên và ảnh đại diện của người tạo tin nhắn
                    filterTimeDivs();
                    groupUserMessages();

                    // Scroll Message tới cuối cùng
                    var scrollTop = document.getElementById('MessageWrapper').scrollTop;
                    var scrollHeight = document.getElementById('MessageWrapper').scrollHeight;
                    var clientHeight = document.getElementById('MessageWrapper').clientHeight;

                    // Nếu scroll hiện tại không quá 10 tin nhắn hoặc tôi là người gửi tin nhắn
                    // thì sẽ hiển 1 biểu tượng có tin nhắn mới
                    if (scrollHeight - scrollTop - clientHeight <= 2000 || '@ViewContext.GetClaimValue("UserId")' === response.data.senderId) {
                        scrollToBottom()
                    } else {
                        showNewMessageIndicator();
                    }
                }
            }
        });

        </script>

        <script>
            // Chuyển giao diện nhắn tin với User hoặc nhóm
            function transToChatScreen(id, type = '0') {
                event.stopPropagation(); // Ngăn sự kiện click lan lên div

                // Kiểm tra Message hiện tại có phải của UserId không?
                var TargetId = $('#TargetId').val();
                // Case 1: Tap Message hiện tại chưa được tải
                if (TargetId === undefined || TargetId !== id) {
                    showLoading(true)
                    $.ajax({
                        url: "@Url.Action("TransToChatScreen", "Message")",
                        type: "POST",
                        data: {
                            Id: id,
                            MessageType: type
                        },
                        success: function (response) {
                            showLoading(false)
                            if (response.isSuccess === undefined) {
                                var $html = $("<div>").html(response)
                                if ($html.find("span#Message_Title")) {
                                    document.title = `${$html.find("span#Message_Title").text()} | LinkU`;
                                }

                                CloseModal()
                                $("#pills-chat-message").html(response)
                                SwitchToTabChatArea('tab-chat-message')
                            } else {
                                ShowThongBaoThatBai(response.message)
                            }
                        },
                        error: function (xhr, error) {
                            showLoading(false)
                            ShowThongBaoThatBai(error)
                        }
                    })
                }
                // Case 2: Tap Message hiện tại của UserId
                else {
                    SwitchToTabChatArea('tab-chat-message')
                }
            }

            // Xóa lời mời kết bạn
            function deleteFriendRequest(id) {
                event.stopPropagation();
                showLoading(true);
                $.ajax({
                    url: '@Url.Action("DeleteFriendRequest", "Friend")',
                    type: 'POST',
                    data: {
                        Id: id,
                    },
                    success: function (data) {
                        showLoading(false);
                        if (!data.isSuccess) {
                            ShowThongBaoThatBai(data.message)
                        } else {
                            CloseModal()
                            // Gửi yêu cầu cập nhật FriendRequest
                            connection.invoke("UpdateFriendRequest", id);
                        }
                    },
                    error: function (xhr, error) {
                        showLoading(false);
                        ShowThongBaoThatBai(error)
                    }
                });
            }
        </script>

        <script>
            function scrollToBottom() {
                const chatBox = document.getElementById("MessageWrapper");
                chatBox.scrollTo({
                    top: chatBox.scrollHeight + 1000,
                    behavior: 'smooth'
                });

                if (newMessageCount > 0) {
                    setTimeout(() => {
                        hideNewMessageIndicator();
                    }, 500);
                }
            }

            function scrollToMessageById(messageId) {
                const RETRY_DELAY = 500; // ms
                const targetElement = document.querySelector(`div[data-messageid="${messageId}"]`);

                if (targetElement) {
                    targetElement.scrollIntoView({ behavior: 'smooth', block: 'center' });

                    // Thêm class highlight
                    const message = targetElement.querySelector('div.MyMessage, div.OtherMessage, p.MyMessage, p.OtherMessage');
                    console.log(message)
                    if (message !== null) {
                        message.classList.add('IsScrollTo');

                        // Xóa class sau 2.5 giây để hiệu ứng reset
                        setTimeout(() => {
                            message.classList.remove('IsScrollTo');
                        }, 2500);
                    }
                } else {
                    const chatBox = document.getElementById("MessageWrapper");
                    chatBox.scrollTo({
                        top: 0,
                        behavior: 'smooth'
                    });

                    setTimeout(() => {
                        scrollToMessageById(messageId);
                    }, RETRY_DELAY);
                }
            }


            function ShowResponseMessageContainer(id) {
                var message = ChatContainer.querySelector(`div.Message_Content[data-messageid="${id}"]`)
                if (message === null) return;
                var html = `
                        <div class="d-flex flex-column text-start" data-message-id="${id}" style="max-width: 40%">
                            <span style="font-size: 14px;
                                        font-weight: 600;
                                        margin: 5px 0;
                                        line-height: 20px"
                            >
                                Đang trả lời ${message.getAttribute("data-name")}
                            </span>
                            <span class="text-truncate" style="font-size: 12px; font-weight: 400; margin: 5px 0; line-height: 16px">
                                ${message.querySelectorAll("p").length === 0 ? (message.querySelector("video.FilePreview") === null ? (message.querySelector("img.FilePreview") === null ? "Tệp tin" : "Hình ảnh") : "Video") : message.querySelectorAll("p")[message.querySelectorAll("p").length - 1].innerText}
                            </span>
                        </div>
                        <button type="button" onclick="HideResponseMessageContainer()"
                                class="btn btn-floating"
                                style="--mdb-btn-hover-bg: hsl(0, 0%, 90%); --mdb-btn-color: black; --mdb-btn-hover-color: black; box-shadow: unset; width: 28px; height: 28px; "
                                data-mdb-ripple-init>
                            <i class="fa-solid fa-xmark fs-6"></i>
                        </button>
                    `
                // Gán html
                ResponseMessageContainer.innerHTML = html

                // Hiển thị container
                ResponseMessageContainer.style.display = "flex"
            }

            function HideResponseMessageContainer() {
                // Hiển thị container
                ResponseMessageContainer.style.display = "none"
                ResponseMessageContainer.innerHTML = ''
            }
        </script>

        <!-- Register plugins FilePond -->
        <script>
            FilePond.registerPlugin(
                // encodes the file as base64 data
                FilePondPluginFileEncode,

                // validates files based on input type
                FilePondPluginFileValidateType,

                // validates files base on input size
                FilePondPluginFileValidateSize,

                // corrects mobile image orientation
                FilePondPluginImageExifOrientation,

                // previews the image
                FilePondPluginImagePreview,

                // crops the image to a certain aspect ratio
                FilePondPluginImageCrop,

                // resizes the image to fit a certain size
                FilePondPluginImageResize,

                // applies crop and resize information on the client
                FilePondPluginImageTransform
            );

            const mimeToExt = {
                'image/jpeg': 'jpg',
                'image/png': 'png',
                'image/gif': 'gif',
                'video/mp4': 'mp4',
                'application/pdf': 'pdf',
            };
        </script>
    </body>
</html>